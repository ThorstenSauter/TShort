name: Deploy to production environment

on:
  release:
    types:
      - published

  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  shared-terraform-outputs:
    name: Get container registry name
    runs-on: ubuntu-latest
    environment: shared
    outputs:
      registry-name: ${{ steps.terraform-outputs.outputs.registry-name }}
      resource-group-name: ${{ steps.terraform-outputs.outputs.resource-group-name }}
    env:
      ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Terraform init
        uses: ThorstenSauter/terraform-actions/init@v1
        with:
          terraform-version: ${{ vars.TERRAFORM_VERSION }}
          infra-directory: ${{ vars.TF_WORKING_DIRECTORY }}
          resource-group: ${{ vars.TF_BACKEND_RESOURCE_GROUP_NAME }}
          storage-account: ${{ vars.TF_BACKEND_STORAGE_ACCOUNT_NAME }}
          container: ${{ vars.TF_BACKEND_STATE_CONTAINER_NAME }}
          state-file: ${{ vars.TF_BACKEND_STATE_FILE_NAME }}
      - name: Terraform apply refresh only
        working-directory: ${{ vars.TF_WORKING_DIRECTORY }}
        run: terraform apply -refresh-only -auto-approve -input=false
      - name: Retrieve Terraform outputs
        id: terraform-outputs
        working-directory: ${{ vars.TF_WORKING_DIRECTORY }}
        run: |
          echo "registry-name=$(terraform output -raw registry_name)" >> "$GITHUB_OUTPUT"
          echo "resource-group-name=$(terraform output -raw resource_group_name)" >> "$GITHUB_OUTPUT"

  build:
    name: Build container image
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      image-name: ${{ steps.image-name.outputs.image-name }}
    needs:
      - shared-terraform-outputs
    env:
      IMAGE_TAG: ${{ github.event.release.tag_name }}
      PROJECT_PATH: 'src/TShort.Api/TShort.Api.csproj'
      REGISTRY_NAME: ${{ needs.container-registry-name.outputs.registry-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json
          source-url: ${{ vars.NUGET_FEED_URI }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_GITHUB_PACKAGES_TOKEN }}
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.REGISTRY_NAME }}
      - name: Build image
        run: |
          dotnet publish \
          -p:Version=${{ env.IMAGE_TAG }} \
          -p:PublishProfile=DefaultContainer \
          -p:ContainerRepository=${{ vars.API_IMAGE_NAME }} \
          -p:ContainerRegistry=${{ env.REGISTRY_NAME }}.azurecr.io \
          -p:ContainerImageTag=${{ env.IMAGE_TAG }} \
          ${{ env.PROJECT_PATH }}
      - name: Output image name
        id: image-name
        run: echo "image-name=${{ env.REGISTRY_NAME }}.azurecr.io/${{ vars.API_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"

  apply:
    name: Apply production environment
    runs-on: ubuntu-latest
    environment: production
    needs:
      - build
      - shared-terraform-outputs
    env:
      ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_container_image: ${{ needs.build.outputs.image-name }}
      TF_VAR_container_registry_resource_group: ${{ needs.shared-terraform-outputs.outputs.resource-group-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Terraform apply
        uses: ThorstenSauter/terraform-actions/apply@v1
        with:
          terraform-version: ${{ vars.TERRAFORM_VERSION }}
          infra-directory: ${{ vars.TF_WORKING_DIRECTORY }}
          resource-group: ${{ vars.TF_BACKEND_RESOURCE_GROUP_NAME }}
          storage-account: ${{ vars.TF_BACKEND_STORAGE_ACCOUNT_NAME }}
          container: ${{ vars.TF_BACKEND_STATE_CONTAINER_NAME }}
          state-file: ${{ vars.TF_BACKEND_STATE_FILE_NAME }}

  deploy-web:
    name: Deploy to production Azure Static Web App
    needs:
      - apply
      - build
      - shared-terraform-outputs
    runs-on: ubuntu-latest
    environment: production
    env:
      ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      OUTPUT_DIR: 'publish'
      PROJECT_PATH: 'src/TShort.Web/TShort.Web.csproj'
      TF_VAR_container_image: ${{ needs.build.outputs.image-name }}
      TF_VAR_container_registry_resource_group: ${{ needs.shared-terraform-outputs.outputs.resource-group-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Terraform init
        uses: ThorstenSauter/terraform-actions/init@v1
        with:
          terraform-version: ${{ vars.TERRAFORM_VERSION }}
          infra-directory: ${{ vars.TF_WORKING_DIRECTORY }}
          resource-group: ${{ vars.TF_BACKEND_RESOURCE_GROUP_NAME }}
          storage-account: ${{ vars.TF_BACKEND_STORAGE_ACCOUNT_NAME }}
          container: ${{ vars.TF_BACKEND_STATE_CONTAINER_NAME }}
          state-file: ${{ vars.TF_BACKEND_STATE_FILE_NAME }}
      - name: Terraform apply refresh only
        working-directory: ${{ vars.TF_WORKING_DIRECTORY }}
        run: terraform apply -refresh-only -auto-approve -input=false
      - name: Retrieve deployment token
        id: token-retrieval
        working-directory: ${{ vars.TF_WORKING_DIRECTORY }}
        run: |
          token=$(terraform output -raw deployment_token)
          echo "::add-mask::$token"
          echo "deployment-token=$token" >> "$GITHUB_OUTPUT"
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json
          source-url: ${{ vars.NUGET_FEED_URI }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_GITHUB_PACKAGES_TOKEN }}
      - name: Install wasm-tools
        run: dotnet workload install wasm-tools
      - name: Publish
        run: dotnet publish -p:Version=${{ github.event.release.tag_name }} -p:SourceRevisionId=${{ github.sha }} -o ${{ env.OUTPUT_DIR }} ${{ env.PROJECT_PATH }}
      - name: Deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.token-retrieval.outputs.deployment-token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: '${{ env.OUTPUT_DIR }}/wwwroot'
          skip_api_build: true
          skip_app_build: true
          output_location: ''
